tabladenombres[grupos,3]<- as.character(grupos_rpm_resistencia$porcentaje[1])
}
return(unique(titulos_grafico))
}
nombres_df<- titulos_graficos(df)
leyenda<- paste0(nombres_df)
legend("topleft",y.intersp = 0.75,seg.len = 1.2,
bty="n", bg="transparent",inset=c(0,0),
legend = leyenda,lty = c(1,1,1,1,1),lwd = c(2,2,2,2,2),col = colores[1:5],ncol = 1,cex = 1)
dev.off()
tabladenombress<-function(df){
group_number<-length(attr(group_by(df,experimento,angulo), "group"))
tabladenombres<- matrix(-31,ncol = 2, nrow = group_number)
for (grupos in 1:group_number) {
grupos_rpm_resistencia<- df %>% group_by(.,experimento,angulo) %>% select_groups(grupos)
tabladenombres[grupos,1]<-as.character(grupos_rpm_resistencia$experimento[1])
tabladenombres[grupos,2]<- as.character(grupos_rpm_resistencia$angulo[1])
}
return(as.data.frame(tabladenombres))
}
tablanombres<-tabladenombress(df)
coeficientes_P_V_modelo<-data.frame(matrix(unlist(lista_coef_modelo),nrow=5, byrow=T))
coeficientes_P_V_prototipo<-data.frame(matrix(unlist(lista_coef_prototipo),nrow=5, byrow=T))
coef_tabla<- cbind(tablanombres,coeficientes_P_V_prototipo)
names(coef_tabla)<-c("Experimento","Angulo","a","b")
return(coef_tabla)
}
grafica_Potencia_V_alfa(df,limitex,limitey)
##funcion para plotear todas las graficas de Cp a todas las velocidades, comparando experimentos
ploteo_CPmax10<- function(datos,grados){
df<-datos
select_groups <- function(data, groups) {
data[sort(unlist(attr(data, "indices")[ groups ])) + 1, ]
}
lista_Cpmax_total<-list()
lista_Cps_nueva<-list()
nombres_gra<- vector()
group_number<-length(attr(group_by(df,experimento,angulo), "group"))
for (groups_ind in 1:group_number) {
xx<- df %>% group_by(.,experimento,angulo) %>% select_groups(groups_ind)
percentaje_number<-length(attr(group_by(xx,porcentaje), "group") )
nombre_1<-as.character(xx$experimento[1])
nombre_2<-as.character(xx$angulo[1])
nombre<-paste(nombre_1,nombre_2,sep = "_")
if(is.na(nombre_2)){
nombre_grafica<- nombre_1
}else{
nombre_grafica<-paste(nombre_1," ",nombre_2,"º",sep = "")
}
xx_percentaje<-list()
for (per in 1:percentaje_number) {
xx_perc<- xx %>% group_by(.,porcentaje) %>% select_groups(per)
xx_perc<-cbind(xx_perc$cp_alfa,xx_perc$TSR_alfa,xx_perc$V_viento_alfa)
colnames(xx_perc)<- c("cp","TSR", "Vviento")
xx_percentaje[[per]]<- xx_perc
}
##lambda_cp es una tabla de dos columnas (cp,lambda)
lambda_Cp<- xx_percentaje
lambda_Cp_clean<-list()
for(j in 1:length(lambda_Cp)){
cp_lmb<- lambda_Cp[[j]]
cp_lmb<-cp_lmb[order(cp_lmb[,2]),]
TSR_1<-cp_lmb[,2]
Cp_1<-cp_lmb[,1]
V_tsr<- seq(0.05,max(TSR_1),by=max(TSR_1)/8)
TSR_2<- vector()
Cp_2<- vector()
for(i in 1:length(V_tsr)){
Cp_2[i]<- Cp_1[which.min(abs(TSR_1-V_tsr[i]))]
TSR_2[i]<-TSR_1[which.min(abs(TSR_1-V_tsr[i]))]
}
validacion<-cbind(unique(Cp_2),unique(TSR_2))
validacion_1<- validacion[1:which.max(validacion[,1]),]
validacion_2<- validacion[(which.max(validacion[,1])+1):length(validacion[,1]),]
indeeex<- vector()
rr<- 1
if(length(validacion_2)==2){
validacion_2<- validacion_2
}else{
for (i in 1:length(validacion_2[,1])) {
if(i==length(validacion_2[,1])){break}else{
if(validacion_2[i,1] < validacion_2[(i+1),1]){
indeeex[rr]<- as.numeric(i)
rr<-rr+1
}
}
}
}
if(length(indeeex)==0){
validacion_2<- validacion_2
}else{
validacion_2<-validacion_2[-indeeex,]
}
clean_table<-rbind(validacion_1,validacion_2)
lambda_Cp_clean[[j]]<- clean_table
}
lista_Cps_nueva[[groups_ind]]<- lambda_Cp_clean
nombres_gra[groups_ind]<- nombre_grafica
}
vector_nombre_vel<- c(10.34,5.47,6.04,7.29,8.33,9.36)
for (porcentaje in 1:length(lista_Cps_nueva[[1]])) {
lista_cpmsVmax<- lapply(lista_Cps_nueva,"[[",porcentaje)
x_max<-max(sapply(lista_cpmsVmax, function(x) max(x[,2])))
y_max<-max(sapply(lista_cpmsVmax, function(x) max(x[,1])))
dir.create(paste0(here(),"/graficos_Cp_juntos/"))
#jpeg(paste0(here(),"/graficos_Cp_juntos/",porcentaje,".jpeg"))
tiff(paste0(here(),"/graficos_Cp_juntos/",porcentaje,".tiff"), width = 7, height =7, units = 'in', res = 300)
colores<- c("orange","red","blue","dodgerblue4","purple")
pch_dif<-c(0:5)
for(i in 1:(length(lista_cpmsVmax))){
x<- lista_cpmsVmax[[i]][,2]
y<- lista_cpmsVmax[[i]][,1]
fit5<-lm(y~poly(x,grados,raw=TRUE))
xx <- seq(min(x),max(x), by=0.01)
plot(NULL,xlim=c(0,(x_max+0.2)),
ylim = c(0,(y_max+0.01)),cex=0.005, yaxt ="n",
xlab = "TSR", ylab = "Cp", bty='L')
par(new=T)
lines(xx, predict(fit5, data.frame(x=xx)), col=colores[i],lwd=2)
tabla_maxcp<-cbind(xx,predict(fit5, data.frame(x=xx)))
par(new=T)
}
axis(2, at=unique(round(seq(0,(y_max+0.02), by=round((y_max/10),digits = 4)),digits = 2)),las=2)
leyenda<-paste0(nombres_gra)
legend("topright", inset=c(0,0),leyenda,
text.col = colores,ncol = 1,cex = 1)
titulo<- paste0("Comparación de gráficas Cp-TSR \n con el túnel de viento al 100 %")
title(main = titulo)
dev.off()
}
}
ploteo_CPmax10(df,2)
View(df)
df_mutate<-function(tabla_cruda){
df<- tabla_cruda
df %<>% mutate(experimento= factor(
ifelse(str_detect(archivos, 'concentrador'), 'concentrador',
ifelse(str_detect(archivos, 'piloto'), 'piloto','pared')
)
)
)
df %<>% mutate(angulo=  str_extract(archivos,pattern = "concentrador/[0-9]+") ) %>%
mutate(angulo =  factor(str_remove(angulo,pattern = "concentrador/") ),
porcentaje=str_extract(archivos, pattern = "prueba_[0-9]+")) %>%
mutate(porcentaje=factor(str_remove(porcentaje,pattern = "prueba_"))) %>%
mutate(resistencia=str_extract(archivos, pattern = "[0-9]+.csv")) %>%
mutate(resistencia=factor(str_remove(resistencia,pattern = ".csv")),
watts = V*A,
wind_power = 0.5*1.2*0.27*0.45*(`m/s`)^3,
TSR = RPM*2*pi*r/60/`m/s`,
cp = watts/wind_power)
Vviento_piloto<- unique(df[which(df$experimento=="piloto"),][c(3,8)])
df %<>% mutate(Vviento_estandar = ifelse(df$porcentaje==100,10.341669,
ifelse(df$porcentaje==90,9.357483,
ifelse(df$porcentaje==80,8.326538,
ifelse(df$porcentaje==70,7.293694,
ifelse(df$porcentaje==60,6.040875,
ifelse(df$porcentaje==50,5.474545,NA)))))))
df%<>% mutate(V_viento_correcion= ifelse(df$experimento != "piloto", (df$`m/s`)/0.7, df$`m/s`))
df%<>% mutate(wind_power_correccion = 0.5*1.2*0.27*0.45*(df$V_viento_correcion)^3,
TSR_correc = RPM*2*pi*r/60/df$V_viento_correcion,
cp_correc = watts/wind_power_correccion)
df%<>% mutate(V_viento_alfa= ifelse(df$experimento != "piloto", ((df$`m/s`)/0.7)/1.85,( df$`m/s`)/1.85))
df%<>% mutate(wind_power_alfa = 0.5*1.2*0.50*0.45*(df$V_viento_alfa)^3,
TSR_alfa = RPM*2*pi*r/60/df$V_viento_alfa,
cp_alfa = watts/wind_power_alfa)
df%<>% mutate(wind_power_est = 0.5*1.2*0.27*0.45*(df$Vviento_estandar)^3,
TSR_est = RPM*2*pi*r/60/df$Vviento_estandar,
cp_est = watts/wind_power_est)
return(df)
}
df<- df_mutate(df)
ploteo_CPmax10(df,2)
grafica_Potencia_V_alfa(df,limitex,limitey)
df_mutate<-function(tabla_cruda){
df<- tabla_cruda
df %<>% mutate(experimento= factor(
ifelse(str_detect(archivos, 'concentrador'), 'concentrador',
ifelse(str_detect(archivos, 'piloto'), 'piloto','pared')
)
)
)
df %<>% mutate(angulo=  str_extract(archivos,pattern = "concentrador/[0-9]+") ) %>%
mutate(angulo =  factor(str_remove(angulo,pattern = "concentrador/") ),
porcentaje=str_extract(archivos, pattern = "prueba_[0-9]+")) %>%
mutate(porcentaje=factor(str_remove(porcentaje,pattern = "prueba_"))) %>%
mutate(resistencia=str_extract(archivos, pattern = "[0-9]+.csv")) %>%
mutate(resistencia=factor(str_remove(resistencia,pattern = ".csv")),
watts = V*A,
wind_power = 0.5*1.2*0.27*0.45*(`m/s`)^3,
TSR = RPM*2*pi*r/60/`m/s`,
cp = watts/wind_power)
Vviento_piloto<- unique(df[which(df$experimento=="piloto"),][c(3,8)])
df %<>% mutate(Vviento_estandar = ifelse(df$porcentaje==100,10.341669,
ifelse(df$porcentaje==90,9.357483,
ifelse(df$porcentaje==80,8.326538,
ifelse(df$porcentaje==70,7.293694,
ifelse(df$porcentaje==60,6.040875,
ifelse(df$porcentaje==50,5.474545,NA)))))))
df%<>% mutate(V_viento_correcion= ifelse(df$experimento != "piloto", (df$`m/s`)/0.7, df$`m/s`))
df%<>% mutate(wind_power_correccion = 0.5*1.2*0.27*0.45*(df$V_viento_correcion)^3,
TSR_correc = RPM*2*pi*r/60/df$V_viento_correcion,
cp_correc = watts/wind_power_correccion)
df%<>% mutate(V_viento_alfa= ifelse(df$experimento != "piloto", ((df$`m/s`)/0.7)/1.85,( df$`m/s`)/1.85))
df%<>% mutate(wind_power_alfa = 0.5*1.2*0.50*0.45*(df$V_viento_alfa)^3,
TSR_alfa = RPM*2*pi*r/60/df$V_viento_alfa,
cp_alfa = watts/wind_power_alfa)
df%<>% mutate(wind_power_est = 0.5*1.2*0.27*0.45*(df$Vviento_estandar)^3,
TSR_est = RPM*2*pi*r/60/df$Vviento_estandar,
cp_est = watts/wind_power_est)
return(df)
}
grafica_Potencia_V_alfa<-function(df,xlimite,ylimite){
select_groups <- function(data, groups) {
data[sort(unlist(attr(data, "indices")[ groups ])) + 1, ]
}
group_number<-length(attr(group_by(df,experimento,angulo), "group"))
lista_watts_Vviento_modelo<- list()
lista_watts_Vviento_prototipo<- list()
nombres_expr<-vector()
for (groups_ind in 1:group_number) {
xx<- df %>% group_by(.,experimento,angulo) %>% select_groups(groups_ind)
nombre_1<-as.character(xx$experimento[1])
nombre_2<-as.character(xx$angulo[1])
nombre<-paste(nombre_1,nombre_2,sep = "_")
percentaje_number<-length(attr(group_by(xx,porcentaje), "group") )
xx_percentaje_modelo<-list()
xx_percentaje_prototipo<-list()
for (per in 1:percentaje_number) {
xx_perc<- xx %>% group_by(.,porcentaje) %>% select_groups(per)
xx_perc_modelo<-cbind(xx_perc$cp_est,xx_perc$watts,xx_perc$V_viento_correcion)
colnames(xx_perc_modelo)<- c("cp","watts", "Vviento")
xx_percentaje_modelo[[per]]<- xx_perc_modelo
xx_perc_prototipo<-cbind(xx_perc$cp_alfa,xx_perc$watts,xx_perc$V_viento_alfa)
colnames(xx_perc_prototipo)<- c("cp","watts", "Vviento")
xx_percentaje_prototipo[[per]]<- xx_perc_prototipo
}
lista_watts_Vviento_modelo[[groups_ind]]<- xx_percentaje_modelo
lista_watts_Vviento_prototipo[[groups_ind]]<- xx_percentaje_prototipo
nombres_expr[groups_ind]<- nombre
}
names(lista_watts_Vviento_modelo)<- nombres_expr
lista_watts_Vviento_max_modelo<-list()
lista_watts_Vviento_max_prototipo<-list()
for (i in 1:length(lista_watts_Vviento_modelo)) {
df_watts_Vviento_modelo<- data.frame(matrix(unlist(lapply(lista_watts_Vviento_modelo[[i]],
function(x) x[which.max(x[,1]),2:3])),
nrow=6, byrow=T))
names(df_watts_Vviento_modelo)<- c("Watss","Vviento")
lista_watts_Vviento_max_modelo[[i]]<- df_watts_Vviento_modelo
df_watts_Vviento_prototipo<- data.frame(matrix(unlist(lapply(lista_watts_Vviento_prototipo[[i]],
function(x) x[which.max(x[,1]),2:3])),
nrow=6, byrow=T))
names(df_watts_Vviento_modelo)<- c("Watss","Vviento")
lista_watts_Vviento_max_prototipo[[i]]<- df_watts_Vviento_prototipo
}
names(lista_watts_Vviento_max_modelo)<- nombres_expr
dir.create(paste0(here(),"/graficos_Potencia_V/"))
#jpeg(paste0(here(),"/graficos_Potencia_V/grafica_Potencia_V.jpeg"))
tiff(paste0(here(),"/graficos_Potencia_V/grafica_Potencia_V_comparativa.tiff"), width = 7, height =7, units = 'in', res = 300)
colores<- c("orange","red","blue","dodgerblue4","purple","black")
pch_dif<-c(0:5)
correlacion<- vector()
lista_coef_modelo<-list()
lista_coef_prototipo<-list()
for(i in 1:length(lista_watts_Vviento_max_modelo)){
#en caso de que sea mejor añadir el origen
#x<- c(0,lambda_Cp[[i]][,2])
#y<- c(0,lambda_Cp[[i]][,1])
x_modelo<- lista_watts_Vviento_max_modelo[[i]][,2]
y_modelo<- lista_watts_Vviento_max_modelo[[i]][,1]
fit_curva_modelo<-nls(y_modelo~b+a*x_modelo^3,start = list(a=0, b=0))
xx_modelo <- seq(min(x_modelo),xlimite[2], by=0.1)
x_prototipo<- lista_watts_Vviento_max_prototipo[[i]][,2]
y_prototipo<- lista_watts_Vviento_max_prototipo[[i]][,1]
fit_curva_prototipo<-nls(y_prototipo~b+a*x_prototipo^3,start = list(a=0, b=0))
xx_prototipo <- seq(min(x_prototipo),xlimite[2], by=0.1)
plot(NULL,xlim=xlimite,
ylim = ylimite,cex=0.005, yaxt ="n",
xlab = "Velocidad del viento (m/s)", ylab = "Potencia (W)", bty='L')
title(main= "Curvas de potencia")
par(new=T)
lines(xx_modelo, predict(fit_curva_modelo, data.frame(x_modelo=xx_modelo)), col=colores[i],lwd=1,lty=2)
lines(xx_prototipo, predict(fit_curva_prototipo, data.frame(x_prototipo=xx_prototipo)), col=colores[i],lwd=1,lty=1)
par(new=T)
lista_coef_modelo[[i]]<- coef(fit_curva_modelo)
lista_coef_prototipo[[i]]<- coef(fit_curva_prototipo)
}
axis(2, at=seq(0,ylimite[2], by=round(ylimite[2]/7,0)),las=2)
titulos_graficos<-function(df){
group_number<-length(attr(group_by(df,experimento,angulo,porcentaje), "group"))
lista_rpm_resistencia<- list()
nombres_lista<- vector()
titulos_grafico<- vector()
tabladenombres<- matrix(-31,ncol = 3, nrow = group_number)
for (grupos in 1:group_number) {
grupos_rpm_resistencia<- df %>% group_by(.,experimento,angulo,porcentaje) %>% select_groups(grupos)
tabla_resistencia_rpm<- as.data.frame(cbind(as.numeric(grupos_rpm_resistencia$RPM),as.data.frame(grupos_rpm_resistencia$resistencia)))
colnames(tabla_resistencia_rpm)<- c("RPM", "Omhnios")
nombre_tabla<- unique(paste(grupos_rpm_resistencia$experimento,grupos_rpm_resistencia$angulo,grupos_rpm_resistencia$porcentaje,sep = "_"))
if(is.na(grupos_rpm_resistencia$angulo)){
titulo_graph<- unique(paste0(grupos_rpm_resistencia$experimento))
}else{
titulo_graph<- unique(paste0(grupos_rpm_resistencia$experimento,"-",grupos_rpm_resistencia$angulo,"º"))
}
titulos_grafico[grupos]<- titulo_graph
lista_rpm_resistencia[[grupos]]<- tabla_resistencia_rpm
nombres_lista[grupos]<- nombre_tabla
tabladenombres[grupos,1]<-as.character(grupos_rpm_resistencia$experimento[1])
tabladenombres[grupos,2]<- as.character(grupos_rpm_resistencia$angulo[1])
tabladenombres[grupos,3]<- as.character(grupos_rpm_resistencia$porcentaje[1])
}
return(unique(titulos_grafico))
}
nombres_df<- titulos_graficos(df)
leyenda<- paste0(nombres_df)
legend("topleft",y.intersp = 0.75,seg.len = 1.2,
bty="n", bg="transparent",inset=c(0,0),
legend = leyenda,lty = c(1,1,1,1,1),lwd = c(2,2,2,2,2),col = colores[1:5],ncol = 1,cex = 1)
dev.off()
tabladenombress<-function(df){
group_number<-length(attr(group_by(df,experimento,angulo), "group"))
tabladenombres<- matrix(-31,ncol = 2, nrow = group_number)
for (grupos in 1:group_number) {
grupos_rpm_resistencia<- df %>% group_by(.,experimento,angulo) %>% select_groups(grupos)
tabladenombres[grupos,1]<-as.character(grupos_rpm_resistencia$experimento[1])
tabladenombres[grupos,2]<- as.character(grupos_rpm_resistencia$angulo[1])
}
return(as.data.frame(tabladenombres))
}
tablanombres<-tabladenombress(df)
coeficientes_P_V_modelo<-data.frame(matrix(unlist(lista_coef_modelo),nrow=5, byrow=T))
coeficientes_P_V_prototipo<-data.frame(matrix(unlist(lista_coef_prototipo),nrow=5, byrow=T))
coef_tabla<- cbind(tablanombres,coeficientes_P_V_prototipo)
names(coef_tabla)<-c("Experimento","Angulo","a","b")
return(coef_tabla)
}
grafica_Potencia_V_alfa(df,limitex,limitey)
xx
xx_modelo
xx_prototipo
xx_cp<-xx_prototipo^3*0.5*1.2*0.5*0.45
xx_cp
predict(fit_curva_prototipo, data.frame(x_prototipo=xx_prototipo))
predict(fit_curva_prototipo, data.frame(x_prototipo=xx_prototipo))/xx_cp
xlimite
xlimite<- (0,20)
xlimite<- c(0,20)
xx_prototipo <- seq(min(x_prototipo),xlimite[2], by=0.1)
xx_cp<-xx_prototipo^3*0.5*1.2*0.5*0.45
predict(fit_curva_prototipo, data.frame(x_prototipo=xx_prototipo))/xx_cp
library(here)
source(here('funciones_app_anemometros.R'))
install.packages("tidyverse")
source(here('funciones_app_anemometros.R'))
######Descargar todos los datos
disp<-id_iden(640689911849)
fechaini<- as.character(c("22/05/2018","22/05/2018","09/06/2018",
"09/06/2018","22/06/2018","22/06/2018","22/6/2018"))
disp<- cbind(disp, fechaini)
dt_list<- list()
source(here('funciones_app_anemometros.R'))
install.packages(XML)
install.packages("XML")
source(here('funciones_app_anemometros.R'))
install.packages("chron")
source(here('funciones_app_anemometros.R'))
######Descargar todos los datos
disp<-id_iden(640689911849)
install.packages("rlist")
source(here('funciones_app_anemometros.R'))
source(here('funciones_app_anemometros.R'))
library(here)
source(here('funciones_app_anemometros.R'))
source('~/ProyectoRoseo1/funciones_app_anemometros.R', encoding = 'UTF-8')
source(here('funciones_app_anemometros.R'))
here('funciones_app_anemometros.R')
here('funciones_app_anemometros.R')
here("funciones_app_anemometros.R")
source(here('funciones_app_anemometros.R'), encoding = "UTF-8")
source('~/ProyectoRoseo1/funciones_app_anemometros.R', encoding = 'UTF-8')
source(here('funciones_app_anemometros.R'),encoding = 'UTF-8')
######Descargar todos los datos
disp<-id_iden(640689911849)
fechaini<- as.character(c("22/05/2018","22/05/2018","09/06/2018",
"09/06/2018","22/06/2018","22/06/2018","22/6/2018"))
disp<- cbind(disp, fechaini)
dt_list<- list()
for(i in 1:length(disp[,1])){
if(disp[i,3]==1){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(anemos(disp[i,2]))
dt_list[[nomb]]<- dt
}
if(disp[i,3]==2){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(pluvs(disp[i,2]))
dt_list[[nomb]]<- dt
}
if(disp[i,3]==3){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(term_hig(disp[i,2]))
dt_list[[nomb]]<- dt
}
}
clean_data_list<-lapply(dt_list, clean_data, fechainicio= fechaini)
list.save(clean_data_list, here::here("RoseoDashboard/data/Datos_anemometros.rdata"))
###########Actualizar los datos
clean_data_list<- list.load(here::here("RoseoDashboard/data/Datos_anemometros.rdata"))
last_timestamp<-t(as.data.frame(lapply(clean_data_list,"[", 1, 1)))
disp<-cbind(disp[,1:4],last_timestamp)
#### creamos lista con la nueva informacion de todos los sensores
dt_list_new_values<- list()
for(i in 1:length(disp[,1])){
if(disp[i,3]==1){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(actualizar_anemos(disp[i,2], disp[i,5]))
dt_list_new_values[[nomb]]<- dt
}
if(disp[i,3]==2){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(actualizar_pluvs(disp[i,2],disp[i,5]))
dt_list_new_values[[nomb]]<- dt
}
if(disp[i,3]==3){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(actualizar_term_hig(disp[i,2],disp[i,5]))
dt_list_new_values[[nomb]]<- dt
}
}
######añadir nuevos datos
dt_sum_list<- list()
for(i in 1:length(dt_list_new_values)){
nuevos_dt<- as.data.frame(dt_list_new_values[[i]])
viejos_dt<- as.data.frame(clean_data_list[[i]])
names(viejos_dt)<- names(nuevos_dt)
pos_eq<- which(nuevos_dt[,1]== viejos_dt[1,1])
if(length(pos_eq)==0){
cc<- rbind(nuevos_dt[,],viejos_dt[,])
dt_sum_list[[i]]<- cc
}else{
cc<- rbind(nuevos_dt[1:pos_eq-1,],viejos_dt[,])
dt_sum_list[[i]]<- cc
}
}
name_list<- as.character(disp[,1])
names(dt_sum_list)<- name_list
list.save(dt_sum_list, here::here("RoseoDashboard/data/Datos_anemometros.rdata"))
actualizador_total<-function(){
clean_data_list<- list.load(here::here("RoseoDashboard/data/Datos_anemometros.rdata"))
last_timestamp<-t(as.data.frame(lapply(clean_data_list,"[", 1, 1)))
disp<-cbind(disp[,1:4],last_timestamp)
#### creamos lista con la nueva informacion de todos los sensores
dt_list_new_values<- list()
for(i in 1:length(disp[,1])){
if(disp[i,3]==1){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(actualizar_anemos(disp[i,2], disp[i,5]))
dt_list_new_values[[nomb]]<- dt
}
if(disp[i,3]==2){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(actualizar_pluvs(disp[i,2],disp[i,5]))
dt_list_new_values[[nomb]]<- dt
}
if(disp[i,3]==3){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(actualizar_term_hig(disp[i,2],disp[i,5]))
dt_list_new_values[[nomb]]<- dt
}
}
######añadir nuevos datos
dt_sum_list<- list()
for(i in 1:length(dt_list_new_values)){
nuevos_dt<- as.data.frame(dt_list_new_values[[i]])
viejos_dt<- as.data.frame(clean_data_list[[i]])
names(viejos_dt)<- names(nuevos_dt)
pos_eq<- which(nuevos_dt[,1]== viejos_dt[1,1])
if(length(pos_eq)==0){
cc<- rbind(nuevos_dt[,],viejos_dt[,])
dt_sum_list[[i]]<- cc
}else{
cc<- rbind(nuevos_dt[1:pos_eq-1,],viejos_dt[,])
dt_sum_list[[i]]<- cc
}
}
name_list<- as.character(disp[,1])
names(dt_sum_list)<- name_list
#### Sobreescribimos el archivo del dataset y lo volvemos a cargar
### Nuestros datos validos se seguiran
list.save(dt_sum_list, here::here("RoseoDashboard/data/Datos_anemometros.rdata"))
}
actualizador_total()
clean_data_list<- list.load(here::here("RoseoDashboard/data/Datos_anemometros.rdata"))
dt_list<- list()
for(i in 1:length(disp[,1])){
if(disp[i,3]==1){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(anemos(disp[i,2]))
dt_list[[nomb]]<- dt
}
if(disp[i,3]==2){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(pluvs(disp[i,2]))
dt_list[[nomb]]<- dt
}
if(disp[i,3]==3){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(term_hig(disp[i,2]))
dt_list[[nomb]]<- dt
}
}
