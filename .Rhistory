list.save(clean_data_list, here::here("RoseoDashboard/data/Datos_anemometros.rdata"))
###########Actualizar los datos
clean_data_list<- list.load(here::here("RoseoDashboard/data/Datos_anemometros.rdata"))
last_timestamp<-t(as.data.frame(lapply(clean_data_list,"[", 1, 1)))
disp<-cbind(disp[,1:4],last_timestamp)
#### creamos lista con la nueva informacion de todos los sensores
dt_list_new_values<- list()
for(i in 1:length(disp[,1])){
if(disp[i,3]==1){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(actualizar_anemos(disp[i,2], disp[i,5]))
dt_list_new_values[[nomb]]<- dt
}
if(disp[i,3]==2){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(actualizar_pluvs(disp[i,2],disp[i,5]))
dt_list_new_values[[nomb]]<- dt
}
if(disp[i,3]==3){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(actualizar_term_hig(disp[i,2],disp[i,5]))
dt_list_new_values[[nomb]]<- dt
}
}
######añadir nuevos datos
dt_sum_list<- list()
for(i in 1:length(dt_list_new_values)){
nuevos_dt<- as.data.frame(dt_list_new_values[[i]])
viejos_dt<- as.data.frame(clean_data_list[[i]])
names(viejos_dt)<- names(nuevos_dt)
pos_eq<- which(nuevos_dt[,1]== viejos_dt[1,1])
if(length(pos_eq)==0){
cc<- rbind(nuevos_dt[,],viejos_dt[,])
dt_sum_list[[i]]<- cc
}else{
cc<- rbind(nuevos_dt[1:pos_eq-1,],viejos_dt[,])
dt_sum_list[[i]]<- cc
}
}
name_list<- as.character(disp[,1])
names(dt_sum_list)<- name_list
list.save(dt_sum_list, here::here("RoseoDashboard/data/Datos_anemometros.rdata"))
actualizador_total<-function(){
clean_data_list<- list.load(here::here("RoseoDashboard/data/Datos_anemometros.rdata"))
last_timestamp<-t(as.data.frame(lapply(clean_data_list,"[", 1, 1)))
disp<-cbind(disp[,1:4],last_timestamp)
#### creamos lista con la nueva informacion de todos los sensores
dt_list_new_values<- list()
for(i in 1:length(disp[,1])){
if(disp[i,3]==1){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(actualizar_anemos(disp[i,2], disp[i,5]))
dt_list_new_values[[nomb]]<- dt
}
if(disp[i,3]==2){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(actualizar_pluvs(disp[i,2],disp[i,5]))
dt_list_new_values[[nomb]]<- dt
}
if(disp[i,3]==3){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(actualizar_term_hig(disp[i,2],disp[i,5]))
dt_list_new_values[[nomb]]<- dt
}
}
######añadir nuevos datos
dt_sum_list<- list()
for(i in 1:length(dt_list_new_values)){
nuevos_dt<- as.data.frame(dt_list_new_values[[i]])
viejos_dt<- as.data.frame(clean_data_list[[i]])
names(viejos_dt)<- names(nuevos_dt)
pos_eq<- which(nuevos_dt[,1]== viejos_dt[1,1])
if(length(pos_eq)==0){
cc<- rbind(nuevos_dt[,],viejos_dt[,])
dt_sum_list[[i]]<- cc
}else{
cc<- rbind(nuevos_dt[1:pos_eq-1,],viejos_dt[,])
dt_sum_list[[i]]<- cc
}
}
name_list<- as.character(disp[,1])
names(dt_sum_list)<- name_list
#### Sobreescribimos el archivo del dataset y lo volvemos a cargar
### Nuestros datos validos se seguiran
list.save(dt_sum_list, here::here("RoseoDashboard/data/Datos_anemometros.rdata"))
}
actualizador_total()
clean_data_list<- list.load(here::here("RoseoDashboard/data/Datos_anemometros.rdata"))
dt_list<- list()
for(i in 1:length(disp[,1])){
if(disp[i,3]==1){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(anemos(disp[i,2]))
dt_list[[nomb]]<- dt
}
if(disp[i,3]==2){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(pluvs(disp[i,2]))
dt_list[[nomb]]<- dt
}
if(disp[i,3]==3){
nomb<- as.character(disp[i,1])
dt<-as.data.frame(term_hig(disp[i,2]))
dt_list[[nomb]]<- dt
}
}
library(here)
source(here('funciones_necesarias.R'),encoding = "UTF-8")
data_path<- here('data/')
archivos <- list.files(data_path, pattern = 'csv',
recursive = TRUE, full.names = TRUE)
r<-0.27/2 #radio del cacharro
lista_procesada<-lapply(archivos, procesador)
column_names <- names(lista_procesada[[1]])
df <- data.frame(matrix(unlist(lista_procesada),
nrow=length(lista_procesada),
byrow=T),stringsAsFactors=FALSE)
colnames(df) <- column_names
df<- cbind(archivos,df)
df<- df_mutate(df)
### para generar ploteos de rpm y omhnios. a ka vez que obtengo un data.frame cob los coeficientes de ajuste a y b
## los coeficientes se consiguen para la correlacion más alta, dado que estoy probando con dos regresiones
## siempre hay una más acertada que otra.
source(here('tratamiento_outliers.R'))
coeficientes_RPM<-ajuste_RPM_Resistencia_so(df,tablas_sin_outliers_ni_decreasing)
coeficientes_RPM<-data.frame(matrix(unlist(coeficientes_RPM), nrow=30, byrow=T))
names(coeficientes_RPM)<- c("Experimento","Angulo","Porcentaje","a","b")
df<-add_coef(df,coeficientes_RPM)
###obtencion de las graficas empleando la velocidad de giro aplicando la regresion para estandar,lectura y media
#ploteo_experimento_estandar_RPM_regresion(df,3)
#ploteo_experimento_lectura_RPM_regresion(df,3)
ploteo_experimento_corr_RPM_regresion(df,3)
tabla_cpmax_tsr<-ploteo_experimento_estandar_RPM_regresion_CPmax(df,3)
#esto para crear la tabla de cpmax y TSR en el documento.
Vmax_cpmax<- sapply(tabla_cpmax_tsr, "[", 6, )
ploteo_CPmax10(df,2)
df_mutate<-function(tabla_cruda){
df<- tabla_cruda
df %<>% mutate(experimento= factor(
ifelse(str_detect(archivos, 'concentrador'), 'concentrador',
ifelse(str_detect(archivos, 'piloto'), 'piloto','pared')
)
)
)
df %<>% mutate(angulo=  str_extract(archivos,pattern = "concentrador/[0-9]+") ) %>%
mutate(angulo =  factor(str_remove(angulo,pattern = "concentrador/") ),
porcentaje=str_extract(archivos, pattern = "prueba_[0-9]+")) %>%
mutate(porcentaje=factor(str_remove(porcentaje,pattern = "prueba_"))) %>%
mutate(resistencia=str_extract(archivos, pattern = "[0-9]+.csv")) %>%
mutate(resistencia=factor(str_remove(resistencia,pattern = ".csv")),
watts = V*A,
wind_power = 0.5*1.2*0.27*0.45*(`m/s`)^3,
TSR = RPM*2*pi*r/60/`m/s`,
cp = watts/wind_power)
Vviento_piloto<- unique(df[which(df$experimento=="piloto"),][c(3,8)])
df %<>% mutate(Vviento_estandar = ifelse(df$porcentaje==100,10.341669,
ifelse(df$porcentaje==90,9.357483,
ifelse(df$porcentaje==80,8.326538,
ifelse(df$porcentaje==70,7.293694,
ifelse(df$porcentaje==60,6.040875,
ifelse(df$porcentaje==50,5.474545,NA)))))))
df%<>% mutate(V_viento_correcion= ifelse(df$experimento != "piloto", (df$`m/s`)/0.7, df$`m/s`))
df%<>% mutate(wind_power_correccion = 0.5*1.2*0.27*0.45*(df$V_viento_correcion)^3,
TSR_correc = RPM*2*pi*r/60/df$V_viento_correcion,
cp_correc = watts/wind_power_correccion)
df%<>% mutate(V_viento_alfa= ifelse(df$experimento != "piloto", ((df$`m/s`)/0.7)/1.85,( df$`m/s`)/1.85))
df%<>% mutate(wind_power_alfa = 0.5*1.2*0.50*0.45*(df$V_viento_alfa)^3,
TSR_alfa = RPM*2*pi*r/60/df$V_viento_alfa,
cp_alfa = watts/wind_power_alfa,
watts_alfa=watts/1.85)
df%<>% mutate(wind_power_est = 0.5*1.2*0.27*0.45*(df$Vviento_estandar)^3,
TSR_est = RPM*2*pi*r/60/df$Vviento_estandar,
cp_est = watts/wind_power_est)
return(df)
}
df<- df_mutate(df)
grafica_Potencia_V_alfa<-function(df,xlimite,ylimite){
select_groups <- function(data, groups) {
data[sort(unlist(attr(data, "indices")[ groups ])) + 1, ]
}
group_number<-length(attr(group_by(df,experimento,angulo), "group"))
lista_watts_Vviento_modelo<- list()
lista_watts_Vviento_prototipo<- list()
nombres_expr<-vector()
for (groups_ind in 1:group_number) {
xx<- df %>% group_by(.,experimento,angulo) %>% select_groups(groups_ind)
nombre_1<-as.character(xx$experimento[1])
nombre_2<-as.character(xx$angulo[1])
nombre<-paste(nombre_1,nombre_2,sep = "_")
percentaje_number<-length(attr(group_by(xx,porcentaje), "group") )
xx_percentaje_modelo<-list()
xx_percentaje_prototipo<-list()
for (per in 1:percentaje_number) {
xx_perc<- xx %>% group_by(.,porcentaje) %>% select_groups(per)
xx_perc_modelo<-cbind(xx_perc$cp_est,xx_perc$watts,xx_perc$V_viento_correcion)
colnames(xx_perc_modelo)<- c("cp","watts", "Vviento")
xx_percentaje_modelo[[per]]<- xx_perc_modelo
xx_perc_prototipo<-cbind(xx_perc$cp_alfa,xx_perc$watts_alfa,xx_perc$V_viento_alfa)
colnames(xx_perc_prototipo)<- c("cp","watts", "Vviento")
xx_percentaje_prototipo[[per]]<- xx_perc_prototipo
}
lista_watts_Vviento_modelo[[groups_ind]]<- xx_percentaje_modelo
lista_watts_Vviento_prototipo[[groups_ind]]<- xx_percentaje_prototipo
nombres_expr[groups_ind]<- nombre
}
names(lista_watts_Vviento_modelo)<- nombres_expr
lista_watts_Vviento_max_modelo<-list()
lista_watts_Vviento_max_prototipo<-list()
for (i in 1:length(lista_watts_Vviento_modelo)) {
df_watts_Vviento_modelo<- data.frame(matrix(unlist(lapply(lista_watts_Vviento_modelo[[i]],
function(x) x[which.max(x[,1]),2:3])),
nrow=6, byrow=T))
names(df_watts_Vviento_modelo)<- c("Watss","Vviento")
lista_watts_Vviento_max_modelo[[i]]<- df_watts_Vviento_modelo
df_watts_Vviento_prototipo<- data.frame(matrix(unlist(lapply(lista_watts_Vviento_prototipo[[i]],
function(x) x[which.max(x[,1]),2:3])),
nrow=6, byrow=T))
names(df_watts_Vviento_modelo)<- c("Watss","Vviento")
lista_watts_Vviento_max_prototipo[[i]]<- df_watts_Vviento_prototipo
}
names(lista_watts_Vviento_max_modelo)<- nombres_expr
dir.create(paste0(here(),"/graficos_Potencia_V/"))
#jpeg(paste0(here(),"/graficos_Potencia_V/grafica_Potencia_V.jpeg"))
tiff(paste0(here(),"/graficos_Potencia_V/grafica_Potencia_V_comparativa.tiff"), width = 7, height =7, units = 'in', res = 300)
colores<- c("orange","red","blue","dodgerblue4","purple","black")
pch_dif<-c(0:5)
correlacion<- vector()
lista_coef_modelo<-list()
lista_coef_prototipo<-list()
for(i in 1:length(lista_watts_Vviento_max_modelo)){
#en caso de que sea mejor añadir el origen
#x<- c(0,lambda_Cp[[i]][,2])
#y<- c(0,lambda_Cp[[i]][,1])
x_modelo<- lista_watts_Vviento_max_modelo[[i]][,2]
y_modelo<- lista_watts_Vviento_max_modelo[[i]][,1]
fit_curva_modelo<-nls(y_modelo~b+a*x_modelo^3,start = list(a=0, b=0))
xx_modelo <- seq(min(x_modelo),xlimite[2], by=0.1)
x_prototipo<- lista_watts_Vviento_max_prototipo[[i]][,2]
y_prototipo<- lista_watts_Vviento_max_prototipo[[i]][,1]
fit_curva_prototipo<-nls(y_prototipo~b+a*x_prototipo^3,start = list(a=0, b=0))
xx_prototipo <- seq(min(x_prototipo),xlimite[2], by=0.1)
plot(NULL,xlim=xlimite,
ylim = ylimite,cex=0.005, yaxt ="n",
xlab = "Velocidad del viento (m/s)", ylab = "Potencia (W)", bty='L')
title(main= "Curvas de potencia")
par(new=T)
lines(xx_modelo, predict(fit_curva_modelo, data.frame(x_modelo=xx_modelo)), col=colores[i],lwd=1,lty=2)
lines(xx_prototipo, predict(fit_curva_prototipo, data.frame(x_prototipo=xx_prototipo)), col=colores[i],lwd=1,lty=1)
par(new=T)
lista_coef_modelo[[i]]<- coef(fit_curva_modelo)
lista_coef_prototipo[[i]]<- coef(fit_curva_prototipo)
}
axis(2, at=seq(0,ylimite[2], by=round(ylimite[2]/7,0)),las=2)
titulos_graficos<-function(df){
group_number<-length(attr(group_by(df,experimento,angulo,porcentaje), "group"))
lista_rpm_resistencia<- list()
nombres_lista<- vector()
titulos_grafico<- vector()
tabladenombres<- matrix(-31,ncol = 3, nrow = group_number)
for (grupos in 1:group_number) {
grupos_rpm_resistencia<- df %>% group_by(.,experimento,angulo,porcentaje) %>% select_groups(grupos)
tabla_resistencia_rpm<- as.data.frame(cbind(as.numeric(grupos_rpm_resistencia$RPM),as.data.frame(grupos_rpm_resistencia$resistencia)))
colnames(tabla_resistencia_rpm)<- c("RPM", "Omhnios")
nombre_tabla<- unique(paste(grupos_rpm_resistencia$experimento,grupos_rpm_resistencia$angulo,grupos_rpm_resistencia$porcentaje,sep = "_"))
if(is.na(grupos_rpm_resistencia$angulo)){
titulo_graph<- unique(paste0(grupos_rpm_resistencia$experimento))
}else{
titulo_graph<- unique(paste0(grupos_rpm_resistencia$experimento,"-",grupos_rpm_resistencia$angulo,"º"))
}
titulos_grafico[grupos]<- titulo_graph
lista_rpm_resistencia[[grupos]]<- tabla_resistencia_rpm
nombres_lista[grupos]<- nombre_tabla
tabladenombres[grupos,1]<-as.character(grupos_rpm_resistencia$experimento[1])
tabladenombres[grupos,2]<- as.character(grupos_rpm_resistencia$angulo[1])
tabladenombres[grupos,3]<- as.character(grupos_rpm_resistencia$porcentaje[1])
}
return(unique(titulos_grafico))
}
nombres_df<- titulos_graficos(df)
leyenda<- paste0(nombres_df)
legend("topleft",y.intersp = 0.75,seg.len = 1.2,
bty="n", bg="transparent",inset=c(0,0),
legend = leyenda,lty = c(1,1,1,1,1),lwd = c(2,2,2,2,2),col = colores[1:5],ncol = 1,cex = 1)
dev.off()
tabladenombress<-function(df){
group_number<-length(attr(group_by(df,experimento,angulo), "group"))
tabladenombres<- matrix(-31,ncol = 2, nrow = group_number)
for (grupos in 1:group_number) {
grupos_rpm_resistencia<- df %>% group_by(.,experimento,angulo) %>% select_groups(grupos)
tabladenombres[grupos,1]<-as.character(grupos_rpm_resistencia$experimento[1])
tabladenombres[grupos,2]<- as.character(grupos_rpm_resistencia$angulo[1])
}
return(as.data.frame(tabladenombres))
}
tablanombres<-tabladenombress(df)
coeficientes_P_V_modelo<-data.frame(matrix(unlist(lista_coef_modelo),nrow=5, byrow=T))
coeficientes_P_V_prototipo<-data.frame(matrix(unlist(lista_coef_prototipo),nrow=5, byrow=T))
coef_tabla<- cbind(tablanombres,coeficientes_P_V_prototipo)
names(coef_tabla)<-c("Experimento","Angulo","a","b")
return(coef_tabla)
}
grafica_Potencia_V_alfa(df,limitex,limitey)
df_mutate<-function(tabla_cruda){
df<- tabla_cruda
df %<>% mutate(experimento= factor(
ifelse(str_detect(archivos, 'concentrador'), 'concentrador',
ifelse(str_detect(archivos, 'piloto'), 'piloto','pared')
)
)
)
df %<>% mutate(angulo=  str_extract(archivos,pattern = "concentrador/[0-9]+") ) %>%
mutate(angulo =  factor(str_remove(angulo,pattern = "concentrador/") ),
porcentaje=str_extract(archivos, pattern = "prueba_[0-9]+")) %>%
mutate(porcentaje=factor(str_remove(porcentaje,pattern = "prueba_"))) %>%
mutate(resistencia=str_extract(archivos, pattern = "[0-9]+.csv")) %>%
mutate(resistencia=factor(str_remove(resistencia,pattern = ".csv")),
watts = V*A,
wind_power = 0.5*1.2*0.27*0.45*(`m/s`)^3,
TSR = RPM*2*pi*r/60/`m/s`,
cp = watts/wind_power)
Vviento_piloto<- unique(df[which(df$experimento=="piloto"),][c(3,8)])
df %<>% mutate(Vviento_estandar = ifelse(df$porcentaje==100,10.341669,
ifelse(df$porcentaje==90,9.357483,
ifelse(df$porcentaje==80,8.326538,
ifelse(df$porcentaje==70,7.293694,
ifelse(df$porcentaje==60,6.040875,
ifelse(df$porcentaje==50,5.474545,NA)))))))
df%<>% mutate(V_viento_correcion= ifelse(df$experimento != "piloto", (df$`m/s`)/0.7, df$`m/s`))
df%<>% mutate(wind_power_correccion = 0.5*1.2*0.27*0.45*(df$V_viento_correcion)^3,
TSR_correc = RPM*2*pi*r/60/df$V_viento_correcion,
cp_correc = watts/wind_power_correccion)
df%<>% mutate(V_viento_alfa= ifelse(df$experimento != "piloto", ((df$`m/s`)/0.7)/1.85,( df$`m/s`)/1.85))
df%<>% mutate(wind_power_alfa = 0.5*1.2*0.50*0.45*(df$V_viento_alfa)^3,
TSR_alfa = RPM*2*pi*r/60/df$V_viento_alfa,watts_alfa=watts/1.85,
cp_alfa = watts_alfa/wind_power_alfa)
df%<>% mutate(wind_power_est = 0.5*1.2*0.27*0.45*(df$Vviento_estandar)^3,
TSR_est = RPM*2*pi*r/60/df$Vviento_estandar,
cp_est = watts/wind_power_est)
return(df)
}
df<- df_mutate(df)
ploteo_CPmax10(df,2)
#archivo binario .nc. Me hace falta RNetCDF
library(RNetCDF)
library(dplyr)
library(here)
library(openair)
library(ggplot2)
#Creo un objeto string con el nombre completo del archivo
#PATH+nombre
inputpath<- here()
inputfile<-paste(inputpath,"/bilbo1979_2017.nc",sep="" )
#Acceder al contenido del archivo
# 2 pasos: 1.Abro el archivo; 2. Leo el archivo
SATALT_ini<-open.nc(inputfile)
#Vemos un resumen del contenido
print.nc(SATALT_ini)
#2.1 Leo el tiempo
time_1<-var.get.nc(SATALT_ini,"time")
#2.2 Latitud
latitude_1<-var.get.nc(SATALT_ini,"latitude")
#2.3 Longitud
longitude_1<-var.get.nc(SATALT_ini,"longitude")
lonref0<- 357.054; latref0<- 43.258
idlon<-which.min(abs(longitude_1 - lonref0))
longitude_1[idlon]
idlat<-which.min(abs(latitude_1-latref0))
latitude_1[idlat]
#los datos estan organizados como (longitud,latitud,tiempo), ahora estamos obteniendo todos los datos de velocidad para un punto especifico y todo el tiempo
u10<-var.get.nc(SATALT_ini,"u10", unpack = T)
#2.4 10 metre  Vwind component
v10<-var.get.nc(SATALT_ini,"v10",unpack = T)
wind_abs = sqrt(u10^2 + v10^2)
wind_dir_trig_to = atan2(u10/wind_abs, v10/wind_abs)
wind_dir_trig_to_degrees = wind_dir_trig_to * 180/pi ## -111.6 degrees
summary(wind_abs)
ind_dir_trig_from_degrees = wind_dir_trig_to_degrees + 180 ## 68.38 degrees
#velocidad a 80 metros
wind_abs80<-wind_abs*log(80/1) / log(10/1)  #rugosidad urbana
summary(wind_abs80)
tabla_loc<-expand.grid(longitude_1,latitude_1)
tabla_loc_time<- expand.grid(tabla_loc[,1],time_1)
tabla<- as.data.frame(cbind(tabla_loc_time[,1],tabla_loc[,2],tabla_loc_time[,2],
wind_abs,ind_dir_trig_from_degrees))
names(tabla)<- c("longitud","latitud","time","ws","wd")
lon<- unique(tabla$longitud)
lat<-unique(tabla$latitud)
tabla_localizacion<-tabla[tabla$longitud==lon[2] & tabla$latitud==lat[2],]
tabla_localizacion<-tabla_localizacion %>% mutate(grup_vel=cut(tabla_localizacion$ws,
seq(0,max(tabla_localizacion$ws),by=0.5),
labels = seq(0.5,max(tabla_localizacion$ws),by=0.5),
include.lowest = T,right = T))
tabla_localizacion_altura<- as.data.frame(tabla_localizacion %>% mutate(ws=ws*log(50/1) / log(10/1)))
tabla_localizacion_altura<-tabla_localizacion_altura %>% mutate(grup_vel=cut(tabla_localizacion_altura$ws,
seq(0,max(tabla_localizacion_altura$ws),by=0.5),
labels = seq(0.5,max(tabla_localizacion_altura$ws),by=0.5),
include.lowest = T,right = T))
### representamos windrose a la altura del edifcio
path_here<-paste0(here(),"/graficas_rosas/")
breaks_rose<-length(seq(0,max(tabla_localizacion_altura$ws),by=2))
## REalizamos barplot comparativo
distribuciones_velocidad<- table(tabla_localizacion_altura$grup_vel)
dist_total<-sum(distribuciones_velocidad)
distribuciones_velocidad_porcentaje<- distribuciones_velocidad/dist_total
distribuciones_velocidad_anual<- distribuciones_velocidad_porcentaje*8600
distribuciones_velocidad10<- table(tabla_localizacion$grup_vel)
dist_total10<-sum(distribuciones_velocidad10)
distribuciones_velocidad_porcentaje10<- distribuciones_velocidad10/dist_total10
distribuciones_velocidad_anual10<- distribuciones_velocidad_porcentaje10*8600
add.col<-function(df, new.col) {n.row<-dim(df)[1]
length(new.col)<-n.row
cbind(df, new.col)
}
frame_barplot<- as.data.frame(add.col(distribuciones_velocidad_anual,distribuciones_velocidad_anual10))
frame_barplot<- as.data.frame(cbind(frame_barplot$df,ifelse(is.na(frame_barplot$new.col), 0,frame_barplot$new.col)))
names(frame_barplot)<- c("Dist_50","Dist_10")
row.names(frame_barplot)<- names(distribuciones_velocidad_anual)
tabla_localizacion_NO<-tabla_localizacion_altura[tabla_localizacion_altura$wd < 350 & tabla_localizacion_altura$wd > 314,]
distribuciones_velocidad_NO<- table(tabla_localizacion_NO$grup_vel)
dist_total_NO<-sum(distribuciones_velocidad_NO)
distribuciones_velocidad_porcentaje_NO<- distribuciones_velocidad_NO/dist_total
distribuciones_velocidad_anual_NO<- distribuciones_velocidad_porcentaje_NO*8600
tabla_NO<-as.data.frame( cbind(distribuciones_velocidad_anual_NO))
names(tabla_NO)<- "distribucion"
frame_barplot_NO<- as.data.frame(add.col(distribuciones_velocidad_anual,distribuciones_velocidad_anual_NO))
frame_barplot_NO<- as.data.frame(cbind(frame_barplot_NO$df,ifelse(is.na(frame_barplot_NO$new.col), 0,frame_barplot_NO$new.col)))
names(frame_barplot_NO)<- c("Dist_total","Dist_NO")
row.names(frame_barplot_NO)<- names(distribuciones_velocidad_anual)
#### ya nos ponemos al calculo de la energia anual producida. Empleando los coeficien
## la formula de ajuste es y ~ b + a*x^3
V_viento<-seq(0,max(tabla_localizacion_altura$ws),by=0.5)
select_groups <- function(data, groups) {
data[sort(unlist(attr(data, "indices")[ groups ])) + 1, ]
}
coeficientes_Curva_P_V_alfa<- grafica_Potencia_V_alfa(df,limitex,limitey)
coeficientes_Curva_P_V_alfa
lista_energias<- list()
for (i in 1:group_number) {
coefs_medido<- coeficientes_Curva_P_V_alfa %>% group_by(., Experimento,Angulo) %>% select_groups(i)
coefs_estandar<-  coeficientes_Curva_P_V_estandar %>% group_by(., Experimento,Angulo) %>% select_groups(i)
Curva_de_potencia_medida<- coefs_medido$b+coefs_medido$a*V_viento^3
Curva_de_potencia_medida<-replace(Curva_de_potencia_medida,which(Curva_de_potencia_medida<0),0)
Curva_de_potencia_medida<- Curva_de_potencia_medida[2:80]
Curva_de_potencia_estandar<- coefs_estandar$b+coefs_estandar$a*V_viento^3
Curva_de_potencia_estandar<-replace(Curva_de_potencia_estandar,which(Curva_de_potencia_estandar<0),0)
Curva_de_potencia_estandar<- Curva_de_potencia_estandar[2:80]
tabla_dist_pot<- as.data.frame(cbind(tabla_NO, Curva_de_potencia_estandar,Curva_de_potencia_medida))
names(tabla_dist_pot)<- c("horas", "est","med")
energias<- tabla_dist_pot %>% mutate(energia_est= est*horas, energia_med=med*horas)
lista_energias[[i]]<- energias
}
names(lista_energias)<- paste0(coeficientes_Curva_P_V_medida[,1],coeficientes_Curva_P_V_medida[,2])
#barplot_energias_estandar<-function(){
tabla_energia_est<-as.data.frame(matrix(unlist(lapply(lista_energias,"[",,4), use.names = F), byrow = F,ncol = 5))
names(tabla_energia_est)<- names(lista_energias)
row.names(tabla_energia_est)<- names(distribuciones_velocidad_anual)
path_here<-paste0(here(),"/barplot/")
ggplot(tabla_energia_est)+
geom_bar(aes(x=as.numeric(row.names(tabla_energia_est)),y=concentrador30),stat = "identity",alpha=.9,fill='lightblue',color='lightblue4', show.legend = T)+
geom_bar(aes(x=as.numeric(row.names(tabla_energia_est)),y=concentrador45),stat = "identity", alpha=.8,fill='pink',color='red',show.legend = T)+
geom_bar(aes(x=as.numeric(row.names(tabla_energia_est)),y=concentrador70),stat = "identity",alpha=.7,fill='green2',color='green4', show.legend = T)+
geom_bar(aes(x=as.numeric(row.names(tabla_energia_est)),y=paredNA),stat = "identity", alpha=.6,fill='mediumorchid1',color='mediumorchid4',show.legend = T)+
geom_bar(aes(x=as.numeric(row.names(tabla_energia_est)),y=pilotoNA),stat = "identity",alpha=.5,fill='orange',color='orange4', show.legend = T)+
xlab("Velocidad del viento (m/s)")+
ylab("Energía (W/h)") +
geom_point(x=25, y =200, shape=22, size=5, alpha=.5,fill='lightblue',color='lightblue4')+
geom_point(x=25, y =180, shape=22, size=5, alpha=.4,fill='pink',color='red')+
geom_point(x=25, y =160, shape=22, size=5, alpha=.3,fill='green2',color='green4')+
geom_point(x=25, y =140, shape=22, size=5, alpha=.2,fill='mediumorchid1',color='mediumorchid4')+
geom_point(x=25, y =120, shape=22, size=5,alpha=.1,fill='orange',color='orange4')+
annotate("text",label="Concentrador 30º", x = 30, y = 200)+
annotate("text",label="Concentrador 45º", x = 30, y = 180)+
annotate("text",label="Concentrador 70º", x = 30, y = 160)+
annotate("text",label="Pared", x = 27.5, y = 140)+
annotate("text",label="Piloto", x = 27.5, y = 120)+
ggtitle("Comparativa de las energías anuales producidas empleando las 5 configuraciones \n usando las curvas de potencia generadas con la velocidad estándar")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
barplot_energias_medida<-function(){
tabla_energia_est<-as.data.frame(matrix(unlist(lapply(lista_energias,"[",,5), use.names = F), byrow = F,ncol = 5))
names(tabla_energia_est)<- names(lista_energias)
row.names(tabla_energia_est)<- names(distribuciones_velocidad_anual)
path_here<-paste0(here(),"/barplot/")
ggplot(tabla_energia_est)+
geom_bar(aes(x=as.numeric(row.names(tabla_energia_est)),y=concentrador45),stat = "identity", alpha=.8,fill='pink',color='red',show.legend = T)+
geom_bar(aes(x=as.numeric(row.names(tabla_energia_est)),y=concentrador30),stat = "identity",alpha=.9,fill='lightblue',color='lightblue4', show.legend = T)+
geom_bar(aes(x=as.numeric(row.names(tabla_energia_est)),y=concentrador70),stat = "identity",alpha=.7,fill='green2',color='green4', show.legend = T)+
geom_bar(aes(x=as.numeric(row.names(tabla_energia_est)),y=paredNA),stat = "identity", alpha=.6,fill='mediumorchid1',color='mediumorchid4',show.legend = T)+
geom_bar(aes(x=as.numeric(row.names(tabla_energia_est)),y=pilotoNA),stat = "identity",alpha=.5,fill='orange',color='orange4', show.legend = T)+
xlab("Velocidad del viento (m/s)")+
ylab("Energía (W/h)") +
geom_point(x=30, y =1000, shape=22, size=5, alpha=.1,fill='pink',color='red')+
geom_point(x=30, y =850, shape=22, size=5, alpha=.9,fill='lightblue',color='lightblue4')+
geom_point(x=30, y =700, shape=22, size=5, alpha=.3,fill='green2',color='green4')+
geom_point(x=30, y =550, shape=22, size=5, alpha=.2,fill='mediumorchid1',color='mediumorchid4')+
geom_point(x=30, y =400, shape=22, size=5,alpha=.1,fill='orange',color='orange4')+
annotate("text",label="Concentrador 30º", x = 35, y = 850)+
annotate("text",label="Concentrador 45º", x = 35, y = 1000)+
annotate("text",label="Concentrador 70º", x = 35, y = 700)+
annotate("text",label="Pared", x = 32.5, y = 550)+
annotate("text",label="Piloto", x = 32.5, y = 400)+
ggtitle("Comparativa de las energías anuales producidas empleando las 5 configuraciones")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
ggsave(paste0(path_here,"barplotenergíacomparativa_medida.tiff"), device = "tiff", dpi=1200,width =8, height =7, units = 'in')
return(as.data.frame(colSums(tabla_energia_est)))
}
#energia_anual_est<-barplot_energias_estandar()
energia_anual_med<-barplot_energias_medida()
energia_anual_med
devtools::install_github('yihui/tinytex')
library(tinytex)
